{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", null, [_cache[3] || (_cache[3] = _createTextVNode(\" 平行线数量：\")), _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.lineCount = $event)\n  }, null, 512), [[_vModelText, $data.lineCount]]), _cache[4] || (_cache[4] = _createTextVNode(\" 平行线间隔（米）：\")), _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.lineSpacing = $event)\n  }, null, 512), [[_vModelText, $data.lineSpacing]])]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.saveCoordinates && $options.saveCoordinates(...args))\n  }, \"保存坐标\"), _cache[5] || (_cache[5] = _createElementVNode(\"div\", {\n    id: \"map\",\n    class: \"map\"\n  }, null, -1))]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_createTextVNode","type","_cache","$event","$data","lineCount","lineSpacing","onClick","args","$options","saveCoordinates","id","class"],"sources":["D:\\APP\\my-vue-app\\src\\components\\MapComponent.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div>\r\n      平行线数量：<input type=\"number\" v-model=\"lineCount\" />\r\n      平行线间隔（米）：<input type=\"number\" v-model=\"lineSpacing\" />\r\n    </div>\r\n    <button @click=\"saveCoordinates\">保存坐标</button>\r\n    <div id=\"map\" class=\"map\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport 'ol/ol.css';\r\nimport { Map, View } from 'ol';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport XYZ from 'ol/source/XYZ';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport { Point, LineString } from 'ol/geom';\r\nimport Feature from 'ol/Feature';\r\nimport { fromLonLat, toLonLat } from 'ol/proj';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      map: null,\r\n      source: new VectorSource(),\r\n      points: [],\r\n      lineCount: 10,\r\n      lineSpacing: 10\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      this.map = new Map({\r\n        target: 'map',\r\n        layers: [\r\n          new TileLayer({\r\n            source: new XYZ({\r\n              url: 'http://online{0-3}.map.bdimg.com/onlinelabel/?qt=tile&x={x}&y={y}&z={z}&styles=pl&scaler=1&p=1',\r\n              maxZoom: 18\r\n            })\r\n          }),\r\n          new VectorLayer({\r\n            source: this.source\r\n          })\r\n        ],\r\n        view: new View({\r\n          center: fromLonLat([116.397389, 39.908722]), // 北京天安门\r\n          zoom: 10\r\n        })\r\n      });\r\n\r\n      this.map.on('click', this.handleMapClick);\r\n    },\r\n    handleMapClick(evt) {\r\n      const coordinate = evt.coordinate;\r\n      this.points.push(coordinate);\r\n\r\n      const pointFeature = new Feature(new Point(coordinate));\r\n      this.source.addFeature(pointFeature);\r\n\r\n      if (this.points.length === 2) {\r\n        this.drawMainLine();\r\n        this.drawParallelLines();\r\n      }\r\n    },\r\n    drawMainLine() {\r\n      const line = new LineString(this.points);\r\n      const lineFeature = new Feature(line);\r\n      this.source.addFeature(lineFeature);\r\n    },\r\n    drawParallelLines() {\r\n      const lineCount = parseInt(this.lineCount);\r\n      const lineSpacing = parseFloat(this.lineSpacing);\r\n\r\n      const mainLine = new LineString(this.points);\r\n      const coordinates = mainLine.getCoordinates();\r\n\r\n      const dx = coordinates[1][0] - coordinates[0][0];\r\n      const dy = coordinates[1][1] - coordinates[0][1];\r\n      const length = Math.sqrt(dx * dx + dy * dy);\r\n      const ux = -dy / length;\r\n      const uy = dx / length;\r\n\r\n      for (let i = 1; i <= lineCount; i++) {\r\n        const offset = lineSpacing * i;\r\n\r\n        const offsetCoordinates1 = coordinates.map(coord => [coord[0] + ux * offset, coord[1] + uy * offset]);\r\n        const parallelLine1 = new Feature(new LineString(offsetCoordinates1));\r\n        this.source.addFeature(parallelLine1);\r\n\r\n        const offsetCoordinates2 = coordinates.map(coord => [coord[0] - ux * offset, coord[1] - uy * offset]);\r\n        const parallelLine2 = new Feature(new LineString(offsetCoordinates2));\r\n        this.source.addFeature(parallelLine2);\r\n      }\r\n    },\r\n    saveCoordinates() {\r\n      const features = this.source.getFeatures();\r\n      const lines = features.filter(feature => feature.getGeometry().getType() === 'LineString');\r\n\r\n      let csvContent = \"A_lon,A_lat,B_lon,B_lat\\n\";\r\n      lines.forEach(line => {\r\n        const coords = line.getGeometry().getCoordinates();\r\n        const coordA = toLonLat(coords[0]);\r\n        const coordB = toLonLat(coords[coords.length - 1]);\r\n        csvContent += `${coordA[0]},${coordA[1]},${coordB[0]},${coordB[1]}\\n`;\r\n      });\r\n\r\n      const hiddenElement = document.createElement('a');\r\n      hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csvContent);\r\n      hiddenElement.target = '_blank';\r\n      hiddenElement.download = 'lines.csv';\r\n      hiddenElement.click();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.map {\r\n  width: 100%;\r\n  height: 80vh;\r\n}\r\n</style>"],"mappings":";;uBACEA,mBAAA,CAOM,cANJC,mBAAA,CAGM,c,0BALVC,gBAAA,CAES,SACG,I,gBAAAD,mBAAA,CAA2C;IAApCE,IAAI,EAAC,QAAQ;IAHhC,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAG0CC,KAAA,CAAAC,SAAS,GAAAF,MAAA;gCAATC,KAAA,CAAAC,SAAS,E,6BAHnDL,gBAAA,CAGuD,YACxC,I,gBAAAD,mBAAA,CAA6C;IAAtCE,IAAI,EAAC,QAAQ;IAJnC,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAI6CC,KAAA,CAAAE,WAAW,GAAAH,MAAA;gCAAXC,KAAA,CAAAE,WAAW,E,KAEpDP,mBAAA,CAA8C;IAArCQ,OAAK,EAAAL,MAAA,QAAAA,MAAA,UAAAM,IAAA,KAAEC,QAAA,CAAAC,eAAA,IAAAD,QAAA,CAAAC,eAAA,IAAAF,IAAA,CAAe;KAAE,MAAI,G,0BACrCT,mBAAA,CAAgC;IAA3BY,EAAE,EAAC,KAAK;IAACC,KAAK,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}